generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  EFECTIVO
  TRANSFERENCIA
  DEBITO
  CREDITO
}

enum LogAction {
  CREAR_PRODUCTO
  ACTUALIZAR_PRODUCTO
  ELIMINAR_PRODUCTO
  CREAR_VENTA
  ACTUALIZAR_VENTA
  ELIMINAR_VENTA
  CREAR_COMPRA
  ACTUALIZAR_COMPRA
  ELIMINAR_COMPRA
  ACTUALIZAR_NEGOCIO
}

model Log {
  id          String    @id @default(uuid())
  action      LogAction
  entityId    String
  details     String
  detailsJSON Json?
  createdAt   DateTime  @default(now())
}

model Business {
  id        String   @id @default(uuid())
  name      String
  RUT       String?
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String?        @db.VarChar(255)
  brand        String?
  sellingPrice Decimal
  unitType     String
  stock        Decimal
  isArchived   Boolean
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  SaleItem     SaleItem[]
  PurchaseItem PurchaseItem[]
}

model Purchase {
  id            String         @id @default(uuid())
  totalCost     Decimal
  supplier      String?
  purchaseItems PurchaseItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model PurchaseItem {
  id         String   @id @default(uuid())
  cost       Decimal
  quantity   Decimal
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([purchaseId])
  @@index([productId])
}

model Sale {
  id          String      @id @default(uuid())
  totalPrice  Decimal
  discount    Decimal     @default(0)
  paymentType PaymentType
  saleItems   SaleItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model SaleItem {
  id              String  @id @default(uuid())
  calculatedPrice Decimal
  quantity        Decimal
  saleId          String
  sale            Sale    @relation(fields: [saleId], references: [id])
  productId       String
  product         Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saleId])
  @@index([productId])
}
