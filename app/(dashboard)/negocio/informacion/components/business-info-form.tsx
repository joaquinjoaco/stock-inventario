/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import * as z from "zod"
import { ArrowLeft, Check } from "lucide-react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, useRouter } from "next/navigation"
import { Heading } from "@/components/ui/heading"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { useToast } from "@/hooks/use-toast"
import { Business } from "@prisma/client"

const formSchema = z.object({
    // id is autogenerated.
    RUT: z.string().regex(/^\d+$/, { message: "El RUT solo puede contener números" }).optional(),
    name: z.string().min(1, { message: 'El nombre del negocio es obligatorio' }),
    address: z.string().optional(),
    phone: z.string().optional(),
})

type BusinessInfoFormValues = z.infer<typeof formSchema>

interface BusinessInfoFormProps {
    initialData: Business | null;
}

export const BusinessInfoForm: React.FC<BusinessInfoFormProps> = ({
    initialData,
}) => {

    const params = useParams()
    const router = useRouter()
    const [open, setOpen] = useState(false)
    const [loading, setLoading] = useState(false)

    const { toast } = useToast()

    const title = "Información del negocio"
    const description = "Editar la información del negocio"
    const toastMessage = "Información actualizada"
    const action = "Guardar cambios"

    const defaultValues = initialData ? {
        ...initialData,
        RUT: initialData.RUT || '',
        address: initialData.address || '',
        phone: initialData.phone || '',
    } : {
        RUT: '',
        name: '',
        address: '',
        phone: '',
    }

    const form = useForm<BusinessInfoFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues
    })

    const { watch } = form

    const onSubmit = async (data: BusinessInfoFormValues) => {
        try {
            setLoading(true)
            if (initialData) {
                // Update the business information.
                await axios.patch(`/api/negocio/informacion/0`, data)
            } else {
                // Insert the business information.
                await axios.post(`/api/negocio/informacion`, data)
            }

            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    {toastMessage}
                </div>,
                description: `${data.name}`
            })


        } catch (error: any) {
            toast({
                title: "Ocurrió un error inesperado",
                description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                variant: "destructive",
            })
        } finally {
            setLoading(false)
        }
    }

    useEffect(() => {
        document.title = initialData ? initialData.name : "Información"
    }, [])

    return (
        <>
            <div className="flex items-center justify-between sticky top-0 z-10 bg-background py-4">
                <Heading
                    title={title}
                    description={description}
                />

                <div className="flex gap-x-2">
                    {/* Back button */}
                    <Button
                        disabled={false}
                        variant="secondary"
                        onClick={() => router.back()}
                        type="button"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Volver
                    </Button>

                    <Button
                        disabled={loading}
                        className="ml-auto"
                        type="submit"
                        form="product-form"
                    >
                        {action}
                    </Button>
                </div>

            </div>
            <Separator />

            <Form {...form}>
                <form id="product-form" onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 w-full">
                    <div className="grid grid-cols-2 gap-8">
                        <FormField
                            control={form.control}
                            name="RUT"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>RUT (opcional)</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="RUT" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Nombre</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Nombre del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="address"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Dirección (opcional)</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Dirección del local" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="phone"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Teléfono (opcional)</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Marca del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                    </div>
                </form>
            </Form>
        </>
    )
}