/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import * as z from "zod"
import { ArrowLeft, Check, ChevronsUpDown, Trash } from "lucide-react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, useRouter } from "next/navigation"
import { Heading } from "@/components/ui/heading"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { AlertModal } from "@/components/modals/alert-modal"
import { Checkbox } from "@/components/ui/checkbox"
import { useToast } from "@/hooks/use-toast"
import { Textarea } from "@/components/ui/textarea"
import { cn } from "@/lib/utils"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Command, CommandGroup, CommandItem, CommandList } from "@/components/ui/command"
import { SerializedProduct, SerializedPurchase } from "@/types"
import { Product } from "@prisma/client"

const formSchema = z.object({
    // id is autogenerated.
    totalCost: z.coerce.number().gte(0, { message: 'El precio debe ser positivo' }), // coerce because we are using a decimal
    amount: z.coerce.number().gt(0, { message: 'La cantidad debe ser mayor a 0' }), // coerce because we are using a decimal
    supplier: z.string().optional(),
    productId: z.string().min(1, { message: "Debes seleccionar un producto" }),
})

type PurchaseFormValues = z.infer<typeof formSchema>

interface PurchaseFormProps {
    initialData: SerializedPurchase | null;
    serializedProducts: SerializedProduct[];
}

export const PurchaseForm: React.FC<PurchaseFormProps> = ({
    initialData,
    serializedProducts
}) => {

    const params = useParams()
    const router = useRouter()
    const [open, setOpen] = useState(false)
    const [popoverOpen, setPopoverOpen] = useState(false)
    const [loading, setLoading] = useState(false)

    const { toast } = useToast()

    const title = initialData ? "Editar compra" : "Registrar compra"
    const description = initialData ? "Editar la compra" : "Registrar una nueva compra"
    const toastMessage = initialData ? "Compra actualizada." : "Compra registrada"
    const action = initialData ? "Guardar cambios" : "Registrar compra"

    const defaultValues = initialData ? {
        ...initialData,
        productId: initialData.productId.toString(),
        supplier: initialData.supplier || '',
        totalCost: parseFloat(String(initialData?.totalCost)),
        amount: parseFloat(String(initialData?.amount)),
    } : {
        supplier: '',
        totalCost: 0,
        amount: 0,
        productId: '',
    }

    const form = useForm<PurchaseFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues
    })

    const { watch } = form

    const onSubmit = async (data: PurchaseFormValues) => {
        try {
            setLoading(true)
            if (initialData) {
                // Update the purchase.
                await axios.patch(`/api/compras/${params.purchaseId}`, data)
            } else {
                // Create the purchase.
                await axios.post(`/api/compras`, data)
            }

            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/compras')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    {toastMessage}
                </div>,
                description: `Stock cargado con éxito`
            })


        } catch (error: any) {
            if (error.response.status === 409) {
                toast({
                    title: "Ocurrió un error al generar el ID de la compra",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            } else {
                toast({
                    title: "Ocurrió un error inesperado",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            }
        } finally {
            setLoading(false)
        }
    }

    const onDelete = async () => {
        try {
            setLoading(true)
            await axios.delete(`/api/compras/${params.purchaseId}`)
            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/inventario')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    Compra eliminada con éxito
                </div>
            })

        } catch (error: any) {
            if (error.response.status === 409) {
                if (error.response.data === "fk-constraint-failed") {
                    toast({
                        title: "No se puede eliminar la compra",
                        description: "No se puede eliminar la compra. Aparece en ventas o compras registradas.",
                        variant: "destructive",
                    })
                } else {
                    toast({
                        title: "Ocurrió un error inesperado",
                        description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                        variant: "destructive",
                    })
                }
            }
        } finally {
            setLoading(false)
            setOpen(false)
        }
    }

    useEffect(() => {
        document.title = initialData?.product ? initialData.product?.name : "Nueva compra"
    }, [])

    return (
        <>
            <AlertModal
                isOpen={open}
                onClose={() => setOpen(false)}
                onConfirm={onDelete}
                loading={loading}
                title="¿Eliminar compra?"
                description="Se eliminará la compra, esta acción es destructiva y no se puede deshacer."
                buttonMessage="Confirmar"
            />
            <div className="flex items-center justify-between sticky top-0 z-10 bg-background py-4">
                <Heading
                    title={title}
                    description={description}
                />

                <div className="flex gap-x-2">
                    {/* Back button */}
                    <Button
                        disabled={false}
                        variant="secondary"
                        onClick={() => router.back()}
                        type="button"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Volver
                    </Button>

                    {initialData && (
                        <Button
                            disabled={loading}
                            variant="destructive"
                            onClick={() => setOpen(true)}
                            type="button"
                        >
                            <Trash className="h-4 w-4 mr-2" />
                            Eliminar
                        </Button>
                    )}

                    <Button
                        disabled={loading}
                        className="ml-auto"
                        type="submit"
                        form="purchase-form"
                    >
                        {action}
                    </Button>
                </div>

            </div>
            <Separator />

            <Form {...form}>
                <form id="purchase-form" onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 w-full">
                    <div className="grid grid-cols-2 gap-8">
                        <FormItem>
                            <FormLabel>ID de la compra</FormLabel>
                            <FormControl>
                                <Input
                                    disabled
                                    placeholder={initialData ? initialData.id.toString() : "Autogenerado"}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem>

                        <FormField
                            control={form.control}
                            name="productId"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Producto</FormLabel>
                                    <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>
                                        <PopoverTrigger asChild>
                                            <FormControl>
                                                <Button
                                                    variant="outline"
                                                    role="combobox"
                                                    className={cn(
                                                        "flex justify-between h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                                                        !field.value && "text-muted-foreground"
                                                    )}
                                                >
                                                    {field.value
                                                        ? serializedProducts.find(
                                                            (product) => product?.id.toString() === field.value
                                                        )?.name
                                                        : "Producto"}
                                                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                                                </Button>
                                            </FormControl>
                                        </PopoverTrigger>
                                        <PopoverContent align="start" className="w-[200px] p-0">
                                            <Command>
                                                <CommandList>
                                                    <CommandGroup>
                                                        {serializedProducts.map((product) => (
                                                            product &&
                                                            <CommandItem
                                                                value={product.id.toString()}
                                                                key={product.id}
                                                                onSelect={() => {
                                                                    form.setValue("productId", product.id.toString())
                                                                    setPopoverOpen(false)
                                                                }}
                                                                className="cursor-pointer"
                                                            >
                                                                <Check
                                                                    className={cn(
                                                                        "mr-2 h-4 w-4",
                                                                        product.id.toString() === field.value
                                                                            ? "opacity-100"
                                                                            : "opacity-0"
                                                                    )}
                                                                />
                                                                {product.name}, {product.brand}
                                                            </CommandItem>
                                                        ))}
                                                    </CommandGroup>
                                                </CommandList>
                                            </Command>
                                        </PopoverContent>
                                    </Popover>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="supplier"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Proveedor</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Proveedor del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="amount"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Cantidad</FormLabel>
                                    <FormControl>
                                        <Input type="number" disabled={loading} placeholder="Cantidad adquirida" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="totalCost"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Costo total</FormLabel>
                                    <FormControl>
                                        <Input type="number" disabled={loading} placeholder="Costo total en UYU" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                    </div>
                </form>
            </Form>
        </>
    )
}