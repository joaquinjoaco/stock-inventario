/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import * as z from "zod"
import { ArrowLeft, Check, ChevronsUpDown, DollarSign, ExternalLink, Package, PlusCircle, Printer, Trash, Trash2 } from "lucide-react"
import { useFieldArray, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, useRouter } from "next/navigation"
import { Heading } from "@/components/ui/heading"
import { Button, buttonVariants } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { AlertModal } from "@/components/modals/alert-modal"
import { useToast } from "@/hooks/use-toast"
import { cn, formatterUYU } from "@/lib/utils"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command"
import { SerializedProduct, SerializedPurchase } from "@/types"
import { format } from "date-fns"
import { es } from "date-fns/locale"
import { TooltipWrapper } from "@/components/ui/tooltip-wrapper"
import Link from "next/link"

const purchaseItemSchema = z.object({
    cost: z.coerce.number().gte(0, { message: 'El costo debe ser positivo' }),
    quantity: z.coerce.number().positive({ message: 'La cantidad de producto que se vende debe ser mayor a 0' }), // coerce because we are using a decimal
    name: z.string().optional(),
    brand: z.string().optional(),
    unitType: z.string().optional(),
    availableStock: z.number().optional(),
    productId: z.string().optional(),
})

const formSchema = z.object({
    // id is autogenerated.
    totalCost: z.coerce.number().gte(0, { message: 'El precio debe ser positivo' }), // coerce because we are using a decimal
    supplier: z.string().optional(),
    selectedProducts: z.array(purchaseItemSchema).min(1, { message: "Debe seleccionar al menos un producto" })
})

type PurchaseFormValues = z.infer<typeof formSchema>

interface PurchaseFormProps {
    initialData: SerializedPurchase;
    serializedProducts: SerializedProduct[];
}

export const PurchaseForm: React.FC<PurchaseFormProps> = ({
    initialData,
    serializedProducts
}) => {

    const params = useParams()
    const router = useRouter()
    const [open, setOpen] = useState(false)
    const [popoverOpen, setPopoverOpen] = useState(false)
    const [loading, setLoading] = useState(false)

    const { toast } = useToast()

    const title = initialData ? "Editar compra" : "Registrar compra"
    const description = initialData ? "Editar la compra" : "Se sumará la cantidad especificada al stock del producto"
    const toastMessage = initialData ? "Compra actualizada." : "Compra registrada"
    const action = initialData ? "Guardar cambios" : "Registrar compra"

    const disabled = initialData ? true : false;

    const defaultValues = initialData ? {
        ...initialData,
        supplier: initialData.supplier || '',
        totalCost: parseFloat(String(initialData?.totalCost)),
        selectedProducts: initialData.purchaseItems,
    } : {
        supplier: '',
        totalCost: 0,
        amount: 0,
        productId: '',
        selectedProducts: [],
    }

    const form = useForm<PurchaseFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues
    })
    const { fields: selectedProductsFields, append: appendSelectedProduct, remove: removeSelectedProduct } = useFieldArray({
        name: "selectedProducts",
        keyName: 'uid',
        control: form.control,
    })

    const { watch } = form

    const totalCost = watch('selectedProducts').reduce((total, product) => {
        return total + (Number(product.cost) * Number(product.quantity))
    }, 0)

    const onSubmit = async (data: PurchaseFormValues) => {
        const finalData = { ...data, totalCost: totalCost }
        try {
            setLoading(true)
            if (initialData) {
                // Update the purchase.
                await axios.patch(`/api/compras/${params.purchaseId}`, finalData)
            } else {
                // Create the purchase.
                await axios.post(`/api/compras`, finalData)
            }

            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/compras')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    {toastMessage}
                </div>,
                description: `Stock cargado con éxito`
            })


        } catch (error: any) {
            if (error.response.status === 409) {
                toast({
                    title: "Ocurrió un error al generar el ID de la compra",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            } else {
                toast({
                    title: "Ocurrió un error inesperado",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            }
        } finally {
            setLoading(false)
        }
    }

    const onDelete = async () => {
        try {
            setLoading(true)
            await axios.delete(`/api/compras/${params.purchaseId}`)
            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/inventario')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    Compra eliminada con éxito
                </div>
            })

        } catch (error: any) {
            if (error.response.status === 409) {
                if (error.response.data === "fk-constraint-failed") {
                    toast({
                        title: "No se puede eliminar la compra",
                        description: "No se puede eliminar la compra.",
                        variant: "destructive",
                    })
                } else {
                    toast({
                        title: "Ocurrió un error inesperado",
                        description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                        variant: "destructive",
                    })
                }
            }
        } finally {
            setLoading(false)
            setOpen(false)
        }
    }

    const selectProduct = (product: SerializedProduct) => {
        const selectedProducts = form.getValues('selectedProducts')
        // If the product has not been added it will be added to the array.
        if (!selectedProducts.some((selectedProduct) => selectedProduct.productId === product.id)) {
            appendSelectedProduct({
                cost: product.sellingPrice,
                quantity: 1,
                name: product.name,
                brand: product.brand,
                unitType: product.unitType,
                availableStock: product.stock,
                productId: product.id
            })
        }
    }

    useEffect(() => {
        document.title = initialData ? `Venta ${format(initialData.createdAt, "dd MMMM, yyyy HH:mm", { locale: es })}` : "Nueva compra"
    }, [])

    return (
        <>
            <AlertModal
                isOpen={open}
                onClose={() => setOpen(false)}
                onConfirm={onDelete}
                loading={loading}
                title="¿Eliminar compra?"
                description={
                    <>
                        Se eliminará la compra, esta acción es destructiva y no se puede deshacer.
                        Se restará la cantidad de stock de cada producto al inventario.
                    </>
                }
                buttonMessage="Confirmar"
            />
            <div className="flex items-center justify-between sticky top-0 z-10 bg-background py-4">
                <Heading
                    title={title}
                    description={description}
                />

                <div className="flex gap-x-2">
                    {/* Back button */}
                    <Button
                        disabled={loading}
                        variant="secondary"
                        onClick={() => router.back()}
                        type="button"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Volver
                    </Button>

                    {initialData && (
                        <>
                            <Button
                                disabled={loading}
                                variant="destructive"
                                onClick={() => setOpen(true)}
                                type="button"
                            >
                                <Trash className="h-4 w-4 mr-2" />
                                Eliminar
                            </Button>
                            <Link
                                href={`/compras/${initialData.id}/imprimir`}
                                target="_blank"
                                className={buttonVariants({ variant: "default" })}
                            // type="button"
                            >
                                <Printer className="h-4 w-4 mr-2" />
                                Imprimir
                            </Link>
                        </>
                    )}

                    {!initialData &&
                        <Button
                            disabled={loading}
                            className="ml-auto"
                            type="submit"
                            form="purchase-form"
                        >
                            {action}
                        </Button>
                    }
                </div>

            </div>
            <Separator />

            <Form {...form}>
                <form id="purchase-form" onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 w-full">
                    <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
                        <div className="space-y-8">
                            {!initialData &&
                                <FormField
                                    control={form.control}
                                    name="selectedProducts"
                                    render={({ }) => (
                                        <FormItem>
                                            <FormLabel>Productos</FormLabel>
                                            <Popover open={popoverOpen} onOpenChange={setPopoverOpen} >
                                                <PopoverTrigger asChild>
                                                    <Button
                                                        variant="outline"
                                                        size="sm"
                                                        role="combobox"
                                                        aria-expanded={open}
                                                        aria-label="Selecciona un producto"
                                                        type="button"
                                                        className={cn("w-full justify-between p-[19px] font-normal")}
                                                        disabled={disabled}
                                                    >
                                                        <div className="flex items-center gap-x-2">
                                                            <Package className="flex-none mr-2 h-4 w-4" />
                                                            <p className="truncate">
                                                                Selecciona un producto
                                                            </p>
                                                        </div>
                                                        <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                                                    </Button>
                                                </PopoverTrigger>
                                                <PopoverContent className="w-[500px] p-0">
                                                    <Command>
                                                        <CommandList>
                                                            <CommandInput placeholder="Busca un producto..." />
                                                            <CommandEmpty>
                                                                No se encontró el producto.
                                                            </CommandEmpty>
                                                            <CommandGroup heading="Productos">
                                                                {serializedProducts.map((product, idx) => (
                                                                    <CommandItem
                                                                        key={idx}
                                                                        onSelect={
                                                                            () => selectProduct(product)
                                                                        }
                                                                        className="cursor-pointer"
                                                                    >
                                                                        <PlusCircle className="flex-none h-4 w-4 mr-2" />
                                                                        <p className="truncate">
                                                                            {product?.name} {product?.brand}
                                                                            <span className="truncate text-muted-foreground"> ({product?.stock.toString()} {product?.unitType === 'PESO' ? "KG" : "Unidades"})</span>
                                                                        </p>
                                                                        <p className="ml-auto">{formatterUYU.format(Number(product?.sellingPrice))}</p>
                                                                    </CommandItem>
                                                                ))}
                                                            </CommandGroup>
                                                        </CommandList>
                                                    </Command>
                                                </PopoverContent>
                                            </Popover>
                                            <FormMessage />
                                        </FormItem>
                                    )}
                                />
                            }

                            <FormField
                                control={form.control}
                                name="supplier"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Proveedor (opcional)</FormLabel>
                                        <FormControl>
                                            <Input
                                                {...field}
                                                disabled={disabled}
                                                type="text"
                                                placeholder="Nombre del proveedor"
                                            />
                                        </FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )} />
                        </div>

                        <div className="space-y-4 border rounded-md bg-[#fcf8e6] dark:bg-accent/20 px-6 py-6">
                            <div>
                                <p className="font-bold text-lg">Resumen de la compra</p>
                            </div>
                            {selectedProductsFields.map((item, idx) =>
                                <FormField
                                    key={item.uid}
                                    control={form.control}
                                    name={`selectedProducts.${idx}.quantity`}
                                    render={({ field }) => (
                                        <div className="space-y-2">
                                            <li className="flex justify-between items-center">
                                                {/* Product */}
                                                <div className="flex flex-row gap-x-2 items-center justify-between text-sm font-semibold">
                                                    <Button
                                                        variant="outline"
                                                        type="button"
                                                        disabled={disabled}
                                                        onClick={() => removeSelectedProduct(idx)}
                                                    >
                                                        <Trash2 className="h-4 w-4" />
                                                    </Button>

                                                    <TooltipWrapper
                                                        className="font-normal flex flex-row items-center"
                                                        content={item.unitType}
                                                        icon={<Package className="h-4 w-4 mr-2" />}
                                                        side="right"
                                                    >
                                                        <FormItem>
                                                            <FormControl>
                                                                <Input
                                                                    {...field}
                                                                    type="number"
                                                                    disabled={disabled}
                                                                    placeholder="Cant."
                                                                    className="w-20"
                                                                />
                                                            </FormControl>
                                                        </FormItem>
                                                    </TooltipWrapper>

                                                    <TooltipWrapper
                                                        className="font-normal flex flex-row items-center"
                                                        content={"Ver"}
                                                        icon={<ExternalLink className="h-4 w-4 mr-2" />}
                                                        side="right"
                                                    >
                                                        <Link
                                                            className="ml-2 cursor-pointer font-normal"
                                                            href={`/inventario/${item.productId}`}
                                                            target="_blank"
                                                        >
                                                            {item.name} {item.brand}
                                                        </Link>
                                                    </TooltipWrapper>
                                                </div>

                                                {/* Price */}
                                                <div className="flex mt-1 text-sm">
                                                    <FormField
                                                        key={item.uid}
                                                        control={form.control}
                                                        name={`selectedProducts.${idx}.cost`}
                                                        render={({ field }) => (
                                                            <TooltipWrapper
                                                                className="font-normal flex flex-row items-center"
                                                                content={"Costo por unidad"}
                                                                icon={<DollarSign className="h-4 w-4 mr-2" />}
                                                                side="right"
                                                            >
                                                                <FormItem>
                                                                    <FormControl>
                                                                        <div className="relative">
                                                                            <DollarSign className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4" />
                                                                            <Input
                                                                                {...field}
                                                                                type="number"
                                                                                disabled={disabled}
                                                                                placeholder="Costo"
                                                                                className="w-32 pl-8"
                                                                            />
                                                                        </div>
                                                                    </FormControl>
                                                                </FormItem>
                                                            </TooltipWrapper>
                                                        )}
                                                    />
                                                </div>
                                            </li>
                                            <FormMessage />
                                        </div>
                                    )}
                                />
                            )}

                            <div className="pyspace-y-4 border-t py-4 border-gray-200">
                                <div className="flex items-center justify-between  pt-4">
                                    <div className="text-xl font-bold">
                                        Total
                                    </div>
                                    <div className="text-xl font-extrabold">
                                        {formatterUYU.format(totalCost)}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </Form>
        </>
    )
}