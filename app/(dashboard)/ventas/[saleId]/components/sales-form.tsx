/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import * as z from "zod"
import { ArrowLeft, Check, ChevronsUpDown, ExternalLink, Package, PlusCircle, Trash, Trash2 } from "lucide-react"
import { useFieldArray, useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, useRouter } from "next/navigation"
import { Heading } from "@/components/ui/heading"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
    Form,
    FormControl,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { AlertModal } from "@/components/modals/alert-modal"
import { useToast } from "@/hooks/use-toast"
import { cn, formatterUYU } from "@/lib/utils"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "@/components/ui/command"
import { SerializedProduct, SerializedSale } from "@/types"
import { es } from "date-fns/locale"
import { format } from "date-fns"
import { TooltipWrapper } from "@/components/ui/tooltip-wrapper"
import Link from "next/link"

const saleItemSchema = z.object({
    calculatedPrice: z.coerce.number().gte(0, { message: 'El precio debe ser positivo' }),
    quantity: z.coerce.number().positive({ message: 'La cantidad de producto que se vende debe ser positiva' }), // coerce because we are using a decimal
    name: z.string().optional(),
    brand: z.string().optional(),
    unitType: z.enum(['UNIDAD', 'PESO']).optional(),
    productId: z.number().optional(),
}).superRefine((data, ctx) => {
    if (data.unitType === 'UNIDAD' && !Number.isInteger(data.quantity)) {
        ctx.addIssue({
            code: 'custom',
            path: ['quantity'], // Field causing the error (message will be displayed here)
            message: 'El stock debe ser un número entero cuando el tipo de unidad es UNIDAD.'
        });
    }
});

const formSchema = z.object({
    // id is autogenerated.
    totalPrice: z.coerce.number().gte(0, { message: 'El precio debe ser positivo' }), // coerce because we are using a decimal
    selectedProducts: z.array(saleItemSchema).min(1, { message: "Debe seleccionar al menos un producto" })
})

type SaleFormValues = z.infer<typeof formSchema>

interface SaleFormProps {
    initialData: SerializedSale | null;
    serializedProducts: SerializedProduct[];
}

export const SaleForm: React.FC<SaleFormProps> = ({
    initialData,
    serializedProducts
}) => {

    const params = useParams()
    const router = useRouter()
    const [open, setOpen] = useState(false)
    const [popoverOpen, setPopoverOpen] = useState(false)
    const [loading, setLoading] = useState(false)

    const { toast } = useToast()

    const title = initialData ? "Editar venta" : "Registrar venta"
    const description = initialData ? "Editar la venta" : "Se restará la cantidad especificada al stock del producto"
    const toastMessage = initialData ? "Venta actualizada." : "Venta registrada"
    const action = initialData ? "Guardar cambios" : "Registrar venta"

    const disabled = initialData ? true : false;

    const defaultValues = initialData ? {
        ...initialData,
        selectedProducts: initialData.saleItems,
        totalPrice: initialData.totalPrice,
    } : {
        totalPrice: 0,
    }

    const form = useForm<SaleFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues
    })

    const { fields: selectedProductsFields, append: appendSelectedProduct, remove: removeSelectedProduct } = useFieldArray({
        name: "selectedProducts",
        keyName: 'uid',
        control: form.control,
    })


    const { watch } = form

    const onSubmit = async (data: SaleFormValues) => {
        try {
            setLoading(true)
            if (initialData) {
                // Update the purchase.
                await axios.patch(`/api/ventas/${params.purchaseId}`, data)
            } else {
                // Create the purchase.
                await axios.post(`/api/ventas`, data)
            }

            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/ventas')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    {toastMessage}
                </div>,
                description: `Venta registrada con éxito`
            })


        } catch (error: any) {
            if (error.response.status === 409) {
                toast({
                    title: "Ocurrió un error al generar el ID de la venta",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            } else {
                toast({
                    title: "Ocurrió un error inesperado",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            }
        } finally {
            setLoading(false)
        }
    }

    const onDelete = async () => {
        try {
            setLoading(true)
            await axios.delete(`/api/ventas/${params.purchaseId}`)
            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/ventas')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    Venta eliminada con éxito
                </div>
            })

        } catch (error: any) {
            if (error.response.status === 409) {
                if (error.response.data === "fk-constraint-failed") {
                    toast({
                        title: "No se puede eliminar la venta",
                        description: "No se puede eliminar la venta.",
                        variant: "destructive",
                    })
                } else {
                    toast({
                        title: "Ocurrió un error inesperado",
                        description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                        variant: "destructive",
                    })
                }
            }
        } finally {
            setLoading(false)
            setOpen(false)
        }
    }

    useEffect(() => {
        document.title = initialData ? `Venta Nº ${initialData.id}${format(initialData.createdAt, "dd MMMM, yyyy", { locale: es })}` : "Nueva compra"
    }, [])

    return (
        <>
            <AlertModal
                isOpen={open}
                onClose={() => setOpen(false)}
                onConfirm={onDelete}
                loading={loading}
                title="¿Eliminar venta?"
                description={
                    <>
                        Se eliminará la venta, esta acción es destructiva y no se puede deshacer.
                        Deberás ajustar el stock de los productos manualmente en el apartado de inventario.
                    </>
                }
                buttonMessage="Confirmar"
            />
            <div className="flex items-center justify-between sticky top-0 z-10 bg-background py-4">
                <Heading
                    title={title}
                    description={description}
                />

                <div className="flex gap-x-2">
                    {/* Back button */}
                    <Button
                        disabled={loading}
                        variant="secondary"
                        onClick={() => router.back()}
                        type="button"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Volver
                    </Button>

                    {initialData && (
                        <Button
                            disabled={loading}
                            variant="destructive"
                            onClick={() => setOpen(true)}
                            type="button"
                        >
                            <Trash className="h-4 w-4 mr-2" />
                            Eliminar
                        </Button>
                    )}

                    {!initialData &&
                        <Button
                            disabled={loading}
                            className="ml-auto"
                            type="submit"
                            form="sale-form"
                        >
                            {action}
                        </Button>
                    }
                </div>

            </div>
            <Separator />

            <Form {...form}>
                <form id="sale-form" onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 w-full">
                    <div className="grid grid-cols-2 gap-8">

                        <div className="space-y-8">

                            <FormItem>
                                <FormLabel>ID de la venta</FormLabel>
                                <FormControl>
                                    <Input
                                        disabled
                                        placeholder={initialData ? initialData.id.toString() : "Autogenerado"}
                                    />
                                </FormControl>
                                <FormMessage />
                            </FormItem>

                            <FormItem>
                                <FormLabel>Productos</FormLabel>
                                <Popover open={popoverOpen} onOpenChange={setPopoverOpen} >
                                    <PopoverTrigger asChild>
                                        <Button
                                            variant="outline"
                                            size="sm"
                                            role="combobox"
                                            aria-expanded={open}
                                            aria-label="Selecciona un producto"
                                            type="button"
                                            className={cn("w-full justify-between p-[19px] font-normal")}
                                            disabled={disabled}
                                        >
                                            <div className="flex items-center gap-x-2">
                                                <Package className="flex-none mr-2 h-4 w-4" />
                                                <p className="truncate">
                                                    Selecciona un producto
                                                </p>
                                            </div>
                                            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                                        </Button>
                                    </PopoverTrigger>
                                    <PopoverContent className="w-[500px] p-0">
                                        <Command>
                                            <CommandList>
                                                <CommandInput placeholder="Busca un producto..." />
                                                <CommandEmpty>
                                                    No se encontró el producto.
                                                </CommandEmpty>
                                                <CommandGroup heading="Productos">
                                                    {serializedProducts.map((product, idx) => (
                                                        <CommandItem
                                                            key={idx}
                                                            onSelect={() => appendSelectedProduct({
                                                                calculatedPrice: product.sellingPrice,
                                                                quantity: 1,
                                                                name: product.name,
                                                                brand: product.brand,
                                                                unitType: product.unitType,
                                                                productId: product.id
                                                            })}
                                                            className="cursor-pointer"
                                                        >
                                                            <PlusCircle className="flex-none h-4 w-4 mr-2" />
                                                            <p className="truncate">
                                                                {product?.name}
                                                                <span className="truncate text-muted-foreground"> ({product?.stock.toString()} {product?.unitType === 'PESO' ? "KG" : "Unidades"})</span>
                                                            </p>
                                                            <p className="ml-auto">{formatterUYU.format(Number(product?.sellingPrice))}</p>
                                                        </CommandItem>
                                                    ))}
                                                </CommandGroup>
                                            </CommandList>
                                        </Command>
                                    </PopoverContent>
                                </Popover>
                            </FormItem>
                        </div>

                        {selectedProductsFields.map((item, idx) =>
                            <li key={item.uid} className="flex justify-between">
                                {/* Product */}
                                <div className="flex flex-row gap-x-2 items-center justify-between text-sm font-semibold">
                                    <Button
                                        variant="ghost"
                                        type="button"
                                        disabled={disabled}
                                        onClick={() => removeSelectedProduct(idx)}
                                    >
                                        <Trash2 className="h-4 w-4" />
                                    </Button>
                                    <FormField
                                        control={form.control}
                                        name={`selectedProducts.${idx}.quantity`}
                                        render={({ field }) => (
                                            <FormItem>
                                                <FormLabel>Cantidad {item.unitType === 'PESO' ? "(KG)" : "(UNIDADES)"}</FormLabel>
                                                <FormControl>
                                                    <Input
                                                        {...field}
                                                        type="number"
                                                        max="25000"
                                                        disabled={disabled}
                                                        placeholder="Cantidad"
                                                    />
                                                </FormControl>
                                                <FormMessage />
                                            </FormItem>
                                        )}
                                    />
                                    <TooltipWrapper
                                        className="font-normal flex flex-row items-center"
                                        content={item.name || "Sin descripción"}
                                        icon={<ExternalLink className="h-4 w-4 mr-2" />}
                                    >
                                        <Link
                                            className="cursor-pointer"
                                            href={`/inventario/${item.productId}`}
                                            target="_blank"
                                        >
                                            {item.name}
                                        </Link>
                                    </TooltipWrapper>
                                </div>

                                {/* Price */}
                                <div className="flex mt-1 text-sm">
                                    <p className="font-semibold">
                                        {formatterUYU.format(item.calculatedPrice * watch(`selectedProducts.${idx}.quantity`))}
                                    </p>
                                </div>
                            </li>
                        )}
                    </div>
                </form>
            </Form>
        </>
    )
}