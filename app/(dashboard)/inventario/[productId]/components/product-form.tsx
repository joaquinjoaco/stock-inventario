/* eslint-disable @typescript-eslint/no-explicit-any */
"use client"

import * as z from "zod"
import { ArrowLeft, Check, Trash } from "lucide-react"
import { useForm } from "react-hook-form"
import { zodResolver } from "@hookform/resolvers/zod"
import { useEffect, useState } from "react"
import axios from "axios"
import { useParams, useRouter } from "next/navigation"
import { Heading } from "@/components/ui/heading"
import { Button } from "@/components/ui/button"
import { Separator } from "@/components/ui/separator"
import {
    Form,
    FormControl,
    FormDescription,
    FormField,
    FormItem,
    FormLabel,
    FormMessage
} from "@/components/ui/form"
import { Input } from "@/components/ui/input"
import { AlertModal } from "@/components/modals/alert-modal"
import { Checkbox } from "@/components/ui/checkbox"
import { useToast } from "@/hooks/use-toast"
import { Textarea } from "@/components/ui/textarea"
import { SerializedProduct } from "@/types"

const formSchema = z.object({
    // id is autogenerated.
    name: z.string().min(1, { message: 'El nombre del producto es obligatorio' }),
    description: z.string().max(1024, { message: 'La descripción excede el límite de 1024 caracteres' }).optional(),
    brand: z.string().optional(),
    sellingPrice: z.coerce.number().positive({ message: 'El precio debe ser positivo' }), // coerce because we are using a decimal
    unitType: z.string().min(1, { message: 'El tipo de unidad del producto es obligatorio' }),
    stock: z.coerce.number().positive({ message: 'La cantidad de stock debe ser positiva' }), // coerce because we are using a decimal
    isArchived: z.boolean().default(false).optional(),
})

type ProductFormValues = z.infer<typeof formSchema>

interface ProductFormProps {
    initialData: SerializedProduct | null;

}

export const ProductForm: React.FC<ProductFormProps> = ({
    initialData,
}) => {

    const params = useParams()
    const router = useRouter()
    const [open, setOpen] = useState(false)
    const [loading, setLoading] = useState(false)

    const { toast } = useToast()

    const title = initialData ? "Editar producto" : "Registrar producto"
    const description = initialData ? "Editar el producto del inventario" : "Registrar un nuevo producto del inventario"
    const toastMessage = initialData ? "Producto actualizado." : "Producto registrado"
    const action = initialData ? "Guardar cambios" : "Registrar producto"

    const defaultValues = initialData ? {
        ...initialData,
        description: initialData.description || '',
        brand: initialData.brand || '',
        sellingPrice: parseFloat(String(initialData?.sellingPrice)),
        stock: parseFloat(String(initialData?.stock)),
    } : {
        name: '',
        description: '',
        brand: '',
        sellingPrice: 0,
        unitType: '',
        stock: 0,
        isArchived: false,
    }

    const form = useForm<ProductFormValues>({
        resolver: zodResolver(formSchema),
        defaultValues
    })

    const { watch } = form

    const onSubmit = async (data: ProductFormValues) => {
        try {
            setLoading(true)
            if (initialData) {
                // Update the book.
                await axios.patch(`/api/inventario/${params.productId}`, data)
            } else {
                // Create the book.
                await axios.post(`/api/inventario`, data)
            }

            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/inventario')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    {toastMessage}
                </div>,
                description: `${data.name} ${data.brand}`
            })


        } catch (error: any) {
            if (error.response.status === 409) {
                toast({
                    title: "Ocurrió un error al generar el ID del producto",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            } else {
                toast({
                    title: "Ocurrió un error inesperado",
                    description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                    variant: "destructive",
                })
            }
        } finally {
            setLoading(false)
        }
    }

    const onDelete = async () => {
        try {
            setLoading(true)
            await axios.delete(`/api/inventario/${params.productId}`)
            // COULD USE FETCHING AGAIN AND JUST REVALIDATE THE ROUTE INSTEAD OF GOING BACK.
            router.push('/inventario')
            router.refresh() // Refresh the component so it refetches the patched data.
            toast({
                title: <div className="flex items-center text-green-500">
                    <Check className="h-4 w-4 mr-2" />
                    Producto eliminado con éxito
                </div>
            })

        } catch (error: any) {
            if (error.response.status === 409) {
                if (error.response.data === "fk-constraint-failed") {
                    toast({
                        title: "No se puede eliminar el producto",
                        description: "No se puede eliminar el producto. Aparece en ventas o compras registradas.",
                        variant: "destructive",
                    })
                } else {
                    toast({
                        title: "Ocurrió un error inesperado",
                        description: "Por favor comunícate con el soporte para solucionar el inconveniente",
                        variant: "destructive",
                    })
                }
            }
        } finally {
            setLoading(false)
            setOpen(false)
        }
    }

    useEffect(() => {
        document.title = initialData ? initialData.name : "Nuevo producto"
    }, [])

    return (
        <>
            <AlertModal
                isOpen={open}
                onClose={() => setOpen(false)}
                onConfirm={onDelete}
                loading={loading}
                title="¿Eliminar producto?"
                description="Se eliminará el producto, esta acción es destructiva y no se puede deshacer."
                buttonMessage="Confirmar"
            />
            <div className="flex items-center justify-between sticky top-0 z-10 bg-background py-4">
                <Heading
                    title={title}
                    description={description}
                />

                <div className="flex gap-x-2">
                    {/* Back button */}
                    <Button
                        disabled={false}
                        variant="secondary"
                        onClick={() => router.back()}
                        type="button"
                    >
                        <ArrowLeft className="h-4 w-4 mr-2" />
                        Volver
                    </Button>

                    {initialData && (
                        <Button
                            disabled={loading}
                            variant="destructive"
                            onClick={() => setOpen(true)}
                            type="button"
                        >
                            <Trash className="h-4 w-4 mr-2" />
                            Eliminar
                        </Button>
                    )}

                    <Button
                        disabled={loading}
                        className="ml-auto"
                        type="submit"
                        form="product-form"
                    >
                        {action}
                    </Button>
                </div>

            </div>
            <Separator />

            <Form {...form}>
                <form id="product-form" onSubmit={form.handleSubmit(onSubmit)} className="space-y-8 w-full">
                    <div className="grid grid-cols-2 gap-8">
                        {/* <FormItem>
                            <FormLabel>ID del producto</FormLabel>
                            <FormControl>
                                <Input
                                    disabled
                                    placeholder={initialData ? initialData.id.toString() : "Autogenerado"}
                                />
                            </FormControl>
                            <FormMessage />
                        </FormItem> */}

                        <FormField
                            control={form.control}
                            name="name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Nombre</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Nombre del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="unitType"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Tipo de unidad</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Tipo de unidad del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="brand"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Marca (opcional)</FormLabel>
                                    <FormControl>
                                        <Input disabled={loading} placeholder="Marca del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="sellingPrice"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Precio de venta (UYU)</FormLabel>
                                    <FormControl>
                                        <Input type="number" disabled={loading} placeholder="Precio en pesos uruguayos" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="stock"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Stock {watch('unitType') === 'PESO' ? '(KG)' : '(Unidades)'}</FormLabel>
                                    <FormControl>
                                        <Input type="number" disabled={loading} placeholder="Entero o decimal" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />

                        <FormField
                            control={form.control}
                            name="description"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Descripción (opcional)</FormLabel>
                                    <FormControl>
                                        <Textarea disabled={loading} placeholder="Descripción del producto" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />



                        <FormField
                            control={form.control}
                            name="isArchived"
                            render={({ field }) => (
                                <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4">
                                    <FormControl>
                                        <Checkbox
                                            checked={field.value}
                                            onCheckedChange={field.onChange}
                                        />
                                    </FormControl>
                                    <div className="space-y-1 leading-none">
                                        <FormLabel>
                                            Archivado
                                        </FormLabel>
                                        <FormDescription>
                                            El producto no aparecerá en el listado para ser seleccionado en las ventas o compras.
                                            <br />
                                            De utilidad cuando no puedes borrar un producto y necesitas archivarlo.
                                        </FormDescription>
                                    </div>
                                </FormItem>
                            )}
                        />

                    </div>
                </form>
            </Form>
        </>
    )
}